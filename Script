import telegram
from telegram.ext import Updater, CommandHandler
import docker
import os

# Change token_bot to your Telegram bot token
TOKEN = 'TELE TOKEN BOT'

# Set DOCKER_HOST environment variable
os.environ['DOCKER_HOST'] = 'unix:///var/run/docker.sock'  # Use the correct Docker socket path on macOS

# Initialize Telegram and Docker clients
bot = telegram.Bot(token=TOKEN)
updater = Updater(token=TOKEN, use_context=True)
docker_client = docker.from_env()

# View containers' status
def containers_status(update, context):
    try:
        containers = docker_client.containers.list()
        status_message = "Containers Status:\n"
        for container in containers:
            container_info = container.attrs
            container_name = container_info['Name']
            container_image = container_info['Config']['Image']
            container_status = container_info['State']['Status']
            status_message += f"Name: {container_name}, Image: {container_image}, Status: {container_status}\n"
        update.message.reply_text(status_message)
    except Exception as e:
        update.message.reply_text(f"An error occurred: {str(e)}")

# View images' status
def images_status(update, context):
    try:
        images = docker_client.images.list()
        status_message = "Images Status:\n"
        containers = docker_client.containers.list(all=True)

        for image in images:
            image_id = image.id.split(":")[1]  # Get the image ID
            in_use = any(image_id in container.image.id for container in containers)
            status = "inuse (dangling)" if in_use else "unuse (dangling)"
            status_message += f"ID: {image_id}, Status: {status}\n"
        update.message.reply_text(status_message)
    except Exception as e:
        update.message.reply_text(f"An error occurred: {str(e)}")

# Remove all containers
def remove_containers(update, context):
    try:
        containers = docker_client.containers.list()
        for container in containers:
            container.stop()
            container.remove(force=True)
        update.message.reply_text("All containers have been stopped and removed")
    except Exception as e:
        update.message.reply_text(f"An error occurred: {str(e)}")

# Remove all images
def remove_images(update, context):
    try:
        images = docker_client.images.list()
        for image in images:
            docker_client.images.remove(image.id, force=True)
        update.message.reply_text("All images have been removed")
    except Exception as e:
        update.message.reply_text(f"An error occurred: {str(e)}")

# Run a specific command
def rerun_command(update, context):
    try:
        os.system("WORKER COMMAND")
        update.message.reply_text("The command has been rerun")
    except Exception as e:
        update.message.reply_text(f"An error occurred: {str(e)}")

# Display menu
def menu(update, context):
    menu_message = (
        "Available commands:\n"
        "/containers_status - View containers' status\n"
        "/images_status - View images' status\n"
        "/remove_containers - Stop and remove all containers\n"
        "/remove_images - Remove all images\n"
        "/rerun_command - Run a specific command\n"
    )
    update.message.reply_text(menu_message)

# Register commands for the bot
updater.dispatcher.add_handler(CommandHandler('containers_status', containers_status))
updater.dispatcher.add_handler(CommandHandler('images_status', images_status))
updater.dispatcher.add_handler(CommandHandler('remove_containers', remove_containers))
updater.dispatcher.add_handler(CommandHandler('remove_images', remove_images))
updater.dispatcher.add_handler(CommandHandler('rerun_command', rerun_command))
updater.dispatcher.add_handler(CommandHandler('menu', menu))

# Start the bot
updater.start_polling()
updater.idle()
